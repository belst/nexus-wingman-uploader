use std::fmt::Write as _;
use std::io::Write as _;
use std::{
    error::Error,
    ffi::OsStr,
    fs::{self, File},
    path::Path,
};

const SOURCE_DIR: &str = "assets";

fn main() -> Result<(), Box<dyn Error>> {
    println!("cargo:rerun-if-changed=assets");
    let out_dir = "src";
    let dest_path = Path::new(&out_dir).join("assets.rs");
    let mut assets = File::create(&dest_path)?;
    let mut texture_import_calls = String::new();

    writeln!(&mut assets, r"// AUTOGENERATED. DO NOT EDIT THIS FILE")?;
    writeln!(
        &mut assets,
        r"use nexus::texture::load_texture_from_memory;"
    )?;

    for f in fs::read_dir(SOURCE_DIR)? {
        let f = f?;

        if !f.file_type()?.is_file() && f.path().extension() != Some(OsStr::new(".png")) {
            continue;
        }
        let path = f.path();
        let filename = path.file_name().unwrap().to_string_lossy();
        let basename = path
            .file_stem()
            .unwrap()
            .to_string_lossy()
            .to_ascii_uppercase();
        // prefix to not collide with other addons
        let identifier = format!("UPLOADER_{}", basename.replace("16X16", "16x16"));
        let const_name = basename.trim_end_matches("_16X16");

        writeln!(
            &mut assets,
            r##"pub const {const_name}: &str = "{identifier}";"##,
        )?;
        writeln!(
            &mut texture_import_calls,
            r##"    load_texture_from_memory({const_name}, include_bytes!("../assets/{filename}"), None);"##,
        )?;
    }

    // load texture function
    writeln!(&mut assets, r##"pub fn init_textures() {{"##)?;
    writeln!(
        &mut assets,
        "{texture_import_calls}",
        texture_import_calls = texture_import_calls.trim_end()
    )?;
    writeln!(&mut assets, r"}}")?;

    Ok(())
}
